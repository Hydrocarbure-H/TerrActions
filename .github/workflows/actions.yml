name: Build and deploy our website.

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v2

      - name: Clone Packer template repository
        run: git clone https://github.com/Hydrocarbure-H/TerrActions ./repo

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          packer-version: "1.7.0"

      - name: Validate Packer Template
        run: packer validate ./repo/apache-packer.pkr.hcl

      - name: Build AMI with Packer
        env:
          APP_NAME: "TerrAction"
          HTTPD_PORT: "8080"
        run: packer build -var 'app_name=${{ env.APP_NAME }}' -var 'httpd_port=${{ env.HTTPD_PORT }}' ./repo/apache-packer.pkr.hcl

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve

  destroy:
    needs: deploy
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      run: terraform init

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      
  deregister-ami:
    needs: destroy
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: your-aws-region

    - name: Désenregistrer l'AMI
      run: |
        ami_id=$(aws ec2 describe-images --filters "Name=name,Values=WebApp*" --query 'Images[0].ImageId' --output text)
        if [ -n "$ami_id" ]; then
          aws ec2 deregister-image --image-id $ami_id
          echo "AMI $ami_id désenregistrée avec succès."
        else
          echo "Aucune AMI correspondante trouvée."
        fi
